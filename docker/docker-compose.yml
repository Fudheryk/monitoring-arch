# docker/docker-compose.yml
x-app-common: &app-common
  build:
    context: ..
    dockerfile: ./server/Dockerfile
  env_file: ../.env.docker
  working_dir: /app/server
  volumes:
    - ../server:/app/server:cached
  depends_on:
    db:
      condition: service_healthy
    redis:
      condition: service_healthy
  restart: unless-stopped

services:
  api:
    <<: *app-common
    command: ["api"]  # via /entrypoint.sh
    environment:
      # parle au service "db" du rÃ©seau Docker
      DATABASE_URL: "postgresql+psycopg://postgres:postgres@db:5432/monitoring"
      REDIS_URL: "${REDIS_URL:-redis://redis:6379/0}"
      STUB_SLACK: "1"
      ALERT_REMINDER_MINUTES: "1"
      PGOPTIONS: "-c lock_timeout=5s -c statement_timeout=60000"
    ports:
      - "8000:8000"
    stop_signal: SIGINT
    stop_grace_period: 20s
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/v1/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1g

  worker:
    <<: *app-common
    command: >
      celery -A app.workers.celery_app.celery worker
      --hostname=worker@%h
      -Q ingest,evaluate,heartbeat,http,notify
      -O fair -l info
    environment:
      DATABASE_URL: "postgresql+psycopg://postgres:postgres@db:5432/monitoring"
      PGOPTIONS: "-c lock_timeout=5s -c statement_timeout=60000"
    stop_grace_period: 30s

  beat:
    <<: *app-common
    command: celery -A app.workers.celery_app.celery beat -l info
    stop_grace_period: 30s

  db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d monitoring"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1g

  redis:
    image: redis:7
    command: redis-server --save "" --appendonly no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "6379:6379"
    restart: unless-stopped

volumes:
  pg_data:

networks:
  default:
    driver: bridge
