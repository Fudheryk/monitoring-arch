name: CI

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      STUB_SLACK: "1"
      ALERT_REMINDER_MINUTES: "1"
      KEY: dev-apikey-123
      API: http://localhost:8000

    steps:
      # ---------- CHECKOUT ----------
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- DOCKER INFO ----------
      - name: Show Docker versions
        run: |
          docker --version
          docker compose version || true

      # ---------- UTILS ----------
      - name: Ensure curl + jq are present
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq

      # ---------- PYTHON SETUP ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # ---------- INSTALL DEPENDENCIES (DEV) ----------
      - name: Install project deps (unit tests)
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements-dev.txt
      - name: Show pytest version
        run: pytest --version

      # ---------- UNIT TESTS ----------
      - name: Run unit tests (no Docker)
        env:
          CELERY_TASK_ALWAYS_EAGER: "1"
          STUB_SLACK: "1"
          ALERT_REMINDER_MINUTES: "1"
        run: |
          pytest -q -m "unit" --cov=server/app --cov-config=.coveragerc --cov-report=term-missing --maxfail=1

      # ---------- PREPARE .ENV ----------
      - name: Prepare root .env from example
        run: |
          if [ -f .env.example ]; then
            cp .env.example .env
          else
            echo "ERROR: .env.example is missing at repo root" >&2
            exit 1
          fi
          # Forcer certaines variables pour tests CI
          awk 'BEGIN{printed_slack=0; printed_reminder=0} 
               /^SLACK_WEBHOOK=/ {print "SLACK_WEBHOOK=http://httpbin:80/status/204"; printed_slack=1; next}
               /^ALERT_REMINDER_MINUTES=/ {print "ALERT_REMINDER_MINUTES=1"; printed_reminder=1; next}
               {print}
               END{
                 if(!printed_slack)    print "SLACK_WEBHOOK=http://httpbin:80/status/204";
                 if(!printed_reminder) print "ALERT_REMINDER_MINUTES=1";
                 print "STUB_SLACK=1";
               }' .env > .env.ci
          mv .env.ci .env
          echo "---- .env used in CI ----"
          sed 's/SLACK_WEBHOOK=.*/SLACK_WEBHOOK=[REDACTED]/' .env

      # ---------- START DOCKER STACK ----------
      - name: Start stack (docker compose)
        working-directory: docker
        run: |
          docker compose --env-file ../.env up -d --build
          docker compose ps

      - name: Run Alembic migrations
        working-directory: docker
        run: docker compose exec -T api alembic upgrade head

      - name: Wait for API to be healthy
        run: |
          for i in {1..60}; do
            curl -fsS http://localhost:8000/api/v1/health && exit 0
            sleep 2
          done
          echo "API not healthy" >&2
          exit 1

      # ---------- SMOKE TESTS ----------
      - name: Smoke HTTP targets
        env:
          API: http://localhost:8000
          KEY: dev-apikey-123
        run: |
          chmod +x scripts/smoke_http_targets.sh
          ./scripts/smoke_http_targets.sh

      # ---------- DEBUG CELERY ----------
      - name: Show queues / tasks
        working-directory: docker
        run: |
          docker compose exec -T worker celery -A app.workers.celery_app inspect active_queues || true
          docker compose exec -T worker celery -A app.workers.celery_app inspect registered || true

      # ---------- INTEGRATION / E2E TESTS ----------
      - name: Run integration tests
        env:
          API: http://localhost:8000
          KEY: dev-apikey-123
          STUB_SLACK: "1"
          ALERT_REMINDER_MINUTES: "1"
        run: |
          pytest -q -m "integration" --cov=server/app --cov-config=.coveragerc --cov-report=term-missing --maxfail=1

      - name: Run E2E tests
        env:
          API: http://localhost:8000
          KEY: dev-apikey-123
          STUB_SLACK: "1"
          ALERT_REMINDER_MINUTES: "1"
        run: |
          pytest -q -m "e2e" --cov=server/app --cov-config=.coveragerc --cov-report=term-missing --maxfail=1

      # ---------- LOGS & TEARDOWN ----------
      - name: Dump docker logs on failure
        if: failure()
        working-directory: docker
        run: |
          docker compose ps || true
          docker compose logs api | tail -n 400 || true
          docker compose logs worker | tail -n 400 || true
          docker compose logs db | tail -n 200 || true

      - name: Stop stack
        if: always()
        working-directory: docker
        run: |
          cp ../.env .env || true
          docker compose --env-file .env down -v
